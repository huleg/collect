<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" 
						  width="100%"
						  initialize="initializeHandler(event)"
						  addedToStage="addedToStageHandler(event)"
						  removedFromStage="removedFromStageHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.IResponder;
			import mx.rpc.events.ResultEvent;
			
			import org.openforis.collect.Application;
			import org.openforis.collect.client.ClientFactory;
			import org.openforis.collect.client.UserClient;
			import org.openforis.collect.event.EventDispatcherFactory;
			import org.openforis.collect.event.UIEvent;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.model.proxy.RecordProxy;
			import org.openforis.collect.model.proxy.UserProxy;
			import org.openforis.collect.util.CollectionUtil;
			
			import spark.events.IndexChangeEvent;
			
			private static const UNASSIGNED_ITEM:UserProxy = createUnassignedItem();
			
			private static function createUnassignedItem():UserProxy {
				var unassignedItem:UserProxy = new UserProxy();
				return unassignedItem;
			}
			
			[Bindable]
			private var assignableOwners:IList;
			
			[Bindable]
			private var recordOwner:UserProxy;
			
			private var _broadcastEventListenerInitialized:Boolean;
		
			private function initializeHandler(event:FlexEvent):void {
				viewStack.selectedChild = loadingPanel;
				
				if ( Application.user.hasRole(UserProxy.ROLE_ADMIN)) {
					loadAssignableOwners();
				} else {
					viewStack.selectedChild = defaultPanel;
				}
			}
			
			private function addedToStageHandler(event:Event):void {
				if ( ! _broadcastEventListenerInitialized ) {
					initBroadcastEventListeners();
				}
			}
			
			private function removedFromStageHandler(event:Event):void {
				removeBroadcastEventListeners();
			}
			
			private function initBroadcastEventListeners():void {
				EventDispatcherFactory.getEventDispatcher().addEventListener(UIEvent.RELOAD_RECORD_SUMMARIES, reloadRecordSummariesHandler);
				_broadcastEventListenerInitialized = true;
			}
			
			private function reloadRecordSummariesHandler(event:UIEvent):void {
				if ( Application.user.hasRole(UserProxy.ROLE_ADMIN)) {
					loadAssignableOwners();
				}
			}
			
			private function removeBroadcastEventListeners():void {
				EventDispatcherFactory.getEventDispatcher().removeEventListener(UIEvent.RELOAD_RECORD_SUMMARIES, reloadRecordSummariesHandler);
				_broadcastEventListenerInitialized = false;
			}
			
			override public function set data(value:Object): void {
				super.data = value;
				updateRecordOwner();
			}
			
			private function updateRecordOwner():void {
				var record:RecordProxy = data as RecordProxy;
				if ( record == null || record.owner == null ) {
					recordOwner = UNASSIGNED_ITEM;
				} else if ( Application.user.hasRole(UserProxy.ROLE_ADMIN)) {
					recordOwner = CollectionUtil.getItem(assignableOwners, "name", record.owner.name);
				} else {
					recordOwner = record.owner;
				}
			}
			
			private function loadAssignableOwners():void {
				var userClient:UserClient = ClientFactory.userClient;
				userClient.loadAll(new AsyncResponder(function(resultEvent:ResultEvent, token:Object = null):void {
					var users:IList = resultEvent.result as IList;
					users.addItemAt(UNASSIGNED_ITEM, 0);
					assignableOwners = users;
					updateRecordOwner();
					viewStack.selectedChild = editablePanel;
				}, null));
			}
			
			private function ownerChangeHandler(event:IndexChangeEvent):void {
				var selectedUser:UserProxy = assignableOwners.getItemAt(event.newIndex) as UserProxy;
				var record:RecordProxy = data as RecordProxy;
				var responder:IResponder = new AsyncResponder(
					function(event:ResultEvent, token:Object = null):void {
						record.owner = selectedUser == UNASSIGNED_ITEM ? null: selectedUser;
						recordOwner = selectedUser;
					}, 
					null);
				ClientFactory.dataClient.assignOwner(record.id, selectedUser.id, responder);
			}
			
			private function ownerLabelFunction(owner:UserProxy):String {
				if ( owner == null || owner == UNASSIGNED_ITEM ) {
					return Message.get("list.unassignedOwnerItem");
				} else {
					return owner.name;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout paddingBottom="0" 
							paddingTop="0" 
							paddingLeft="5"
							paddingRight="5"
							gap="0"
							horizontalAlign="center"
							verticalAlign="middle"
							/>
	</s:layout>	
	
	<mx:ViewStack id="viewStack"
				  width="100%" height="100%">
		
		<s:NavigatorContent id="loadingPanel"
							width="100%">
			<s:Label verticalCenter="0" text="{Message.get('global.loading_short')}" />
		</s:NavigatorContent>
		
		<s:NavigatorContent id="defaultPanel"
							width="100%">
			<s:Label width="100%" verticalCenter="0"
					 text="{ownerLabelFunction(recordOwner)}" />
		</s:NavigatorContent>
		
		<s:NavigatorContent id="editablePanel"
							width="100%">
			<s:DropDownList width="100%"
							prompt="{Message.get('list.unassignedOwnerItem')}"
							dataProvider="{assignableOwners}"
							selectedItem="{recordOwner}"
							labelFunction="ownerLabelFunction"
							change="ownerChangeHandler(event)"/>
		</s:NavigatorContent>
		
	</mx:ViewStack>
	
	
</s:GridItemRenderer>
